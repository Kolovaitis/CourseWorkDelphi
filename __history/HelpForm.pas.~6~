unit HelpForm;

interface

uses
   System.SysUtils, System.Types, System.UITypes, System.Classes,
   System.Variants,
   FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
   FMX.Controls.Presentation, FMX.StdCtrls, FMX.Objects;

type
   TDescriptionSet = Record
      ImageBitmap: TBitmap;
      Text: ShortString;
      Title: ShortString;
   End;

   TFormHelp = class(TForm)
      ImRules: TImage;
      Label1: TLabel;
      ImSave: TImage;
      Label2: TLabel;
      ImModes: TImage;
      Label3: TLabel;
      ImAutor: TImage;
      Label4: TLabel;
      ImBackgroundComics: TImage;
      ImBackgroundRed: TImage;
      LTitle: TLabel;
      ImDescription: TImage;
      LDescription: TLabel;
      procedure FormCreate(Sender: TObject);
      procedure OnMenuClick(Sender: TObject);

   public

      MenuPuncts: array [0 .. 3] of TDescriptionSet;

   const
      RulesTitle = 'Правила';
      SaveTitle = 'Сохранение';
      ModesTitle = 'Режимы';
      AboutWorkTitle = 'О работе';
      RulesText =
        'На стол рубашкой вверх выкладывается четное количество карт. При этом каждая карта имеет едиинственную пару среди остальных карт.'
        + ' Игрок выбирает две карты и переворачивает их. Если карты совпали, то они остаются лежать открытыми, иначе эти карты закрываются. Цель игры – открыть все карты.';
      SaveText =
        'В игре реализована функция сохранения результата для режима одиночной игры. '
        + 'Для просмотра сохраненных результатов необходимо выбрать пункт ''Результаты'' в меню на стартовой странице. '
        + 'По нажатию на заголовок столбца таблицы произойдет сортировка по этому столбцу.';
      ModesText =
        'В игре реализованы одиночный и многопользовательский режимы игры. Одиночный режим предназначен для тренировок и сохранения результата. '
        + 'Многопользовательский режим позволяет соревноваться с друзьями. После неправильно открытой карты ход переходит к следующему игроку.';
      AboutWorkText =
        'Данная программа является курсовой работой студента группы 851001 Коловайтиса Никиты на первом курсе.';
      procedure ChangePunct(NewIndex: Integer);
      procedure InitPunct(IndexInArray: Integer;
        const BitmapRes, InitText, InitTitle: String);
   end;

var
   FormHelp: TFormHelp;

implementation

{$R *.fmx}

procedure TFormHelp.ChangePunct(NewIndex: Integer);
begin
   With MenuPuncts[NewIndex] do
   begin
      LTitle.Text := Title;
      ImDescription.Bitmap := ImageBitmap;
      LDescription.Text := Text;
   end;
end;

procedure TFormHelp.FormCreate(Sender: TObject);
var
   InStream: TResourceStream;
begin
   InitPunct(0, 'BitmapRules', RulesText, RulesTitle);
   InitPunct(1, 'BitmapSave', SaveText, SaveTitle);
   InitPunct(2, 'BitmapModes', ModesText, ModesTitle);
   InitPunct(3, 'BitmapAutor', AboutWorkText, AboutWorkTitle);
end;

procedure TFormHelp.InitPunct(IndexInArray: Integer;
  const BitmapRes, InitText, InitTitle: String);
var
   InStream: TResourceStream;
begin
   with MenuPuncts[IndexInArray] do
   begin
      InStream := TResourceStream.Create(HInstance, BitmapRes,
        PChar(RT_RCDATA));
      try
         ImageBitmap := TBitmap.Create;
         ImageBitmap.LoadFromStream(InStream);
      finally
         InStream.Free;
      end;
      Text := InitText;
      Title := InitTitle
   end;
end;

procedure TFormHelp.OnMenuClick(Sender: TObject);
begin
   ChangePunct((Sender as TComponent).Tag);
end;

end.
